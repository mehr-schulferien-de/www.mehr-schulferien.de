<%
  # Check for a custom date parameter
  first_day = if assigns[:custom_start_date] do
    assigns[:custom_start_date]
  else
    days_to_show = Enum.take(@days, 90)
    List.first(days_to_show)
  end
  
  # Use custom days count or default to 90
  days_count = assigns[:days_to_display] || 90
  
  # Create days to show based on first_day
  days_to_show = MehrSchulferien.Calendars.DateHelpers.create_days(first_day, days_count)
  last_day = List.last(days_to_show)
  
  # Monate identifizieren und gruppieren
  month_groups = days_to_show
    |> Enum.group_by(fn day -> {day.year, day.month} end)
    |> Enum.sort()
  
  # Monatsnamen und Anzahl der Tage in jedem Monat
  months_with_days = Enum.map(month_groups, fn {{year, month}, days} ->
    month_name = @months[month] |> String.slice(0, 3)
    {month_name, length(days), year, month}
  end)
  
  # Perioden filtern, die in den angezeigten Zeitraum fallen
  relevant_periods = Enum.filter(@periods, fn period ->
    Date.compare(period.ends_on, first_day) != :lt && Date.compare(period.starts_on, last_day) != :gt
  end)
  
  # Alle Ferien und Feiertage in einer Liste nach Datum sortieren
  all_periods = relevant_periods
    |> Enum.sort_by(fn period -> period.starts_on end, Date)
%>

<!-- Dynamische Timeline Tabelle f체r die n채chsten <%= days_count %> Tage -->
<table class="table-fixed border border-gray-300 text-center text-xs" role="presentation">
  <thead>
    <tr>
      <%= for {month_name, days_count, _year, _month} <- months_with_days do %>
        <td colspan="<%= days_count %>" class="border border-gray-200 whitespace-nowrap font-semibold text-left pl-1"><%= month_name %></td>
      <% end %>
    </tr>
  </thead>

  <tbody>
    <!-- Tageszeile -->
    <tr>
      <%= for day <- days_to_show do %>
        <% 
          is_weekend = Date.day_of_week(day) > 5  # 6 = Samstag, 7 = Sonntag
          # Pr체fen ob Ferien oder Feiertag
          is_vacation = Enum.any?(all_periods, fn period -> 
            period.is_school_vacation &&
            Date.compare(day, period.starts_on) != :lt && 
            Date.compare(day, period.ends_on) != :gt 
          end)
          is_public_holiday = Enum.any?(all_periods, fn period -> 
            period.is_public_holiday &&
            Date.compare(day, period.starts_on) != :lt && 
            Date.compare(day, period.ends_on) != :gt 
          end)
          
          # Klassen f체r Hintergrundfarbe
          bg_class = cond do
            is_vacation -> "bg-green-300"
            is_public_holiday -> "bg-blue-300"
            is_weekend -> "bg-gray-100"
            true -> ""
          end
        %>
        <td class="w-6 h-5 border-t border-b border-gray-200 <%= bg_class %>"></td>
      <% end %>
    </tr>
  </tbody>
</table>

<div class="mt-4">
  <p class="text-sm font-medium mb-2">Ferien und Feiertage im angezeigten Zeitraum:</p>
  <ul class="list-disc pl-5 text-sm">
    <%= for period <- all_periods do %>
      <% 
        # CSS-Klasse basierend auf Art des Ereignisses
        text_class = if period.is_school_vacation, do: "text-green-800", else: "text-blue-800"
      %>
      <li class="<%= text_class %>">
        <%= period.holiday_or_vacation_type.name %> 
        <%= if Date.compare(period.starts_on, period.ends_on) == :eq do %>
          (<%= Calendar.strftime(period.starts_on, "%d.%m.%Y") %>)
        <% else %>
          (<%= Calendar.strftime(period.starts_on, "%d.%m.%Y") %> - <%= Calendar.strftime(period.ends_on, "%d.%m.%Y") %>)
        <% end %>
      </li>
    <% end %>
  </ul>
</div> 