<%
  # Calculate timeline parameters
  first_day = List.first(@days)
  # Show a fixed number of months regardless of @days length (defaults to 4)
  months_to_show = @number_of_months || 4
  total_days = months_to_show * 31
  last_day = Date.add(first_day, total_days - 1)

  # Helper to estimate the 1st of month i (0-based) after first_day
  month_starts =
    for i <- 0..months_to_show - 1 do
      new_month_index = first_day.month - 1 + i
      month = rem(new_month_index, 12) + 1
      year = first_day.year + div(new_month_index, 12)
      %Date{year: year, month: month, day: 1, calendar: Calendar.ISO}
    end

  # Build month markers & labels (skip first which is 0%)
  {month_markers, month_labels} =
    month_starts
    |> Enum.with_index()
    |> Enum.map(fn {date, idx} ->
      percent = Float.round(Date.diff(date, first_day) / total_days * 100, 3)
      {percent, {date, percent}}
    end)
    |> Enum.unzip()

  # Remove the very first 0% marker from marker list (already have 0)
  month_markers = month_markers |> tl()
  month_labels = month_labels |> tl()

  # Filter periods that overlap our window
  relevant_periods = Enum.filter(@periods, fn period ->
    Date.compare(period.ends_on, first_day) != :lt && Date.compare(period.starts_on, last_day) != :gt
  end)

  sorted_periods = Enum.sort_by(relevant_periods, & &1.starts_on)

  # Translate to positions (ensure min width for 1-day public holidays)
  min_width = 0.8
  period_positions = Enum.map(sorted_periods, fn period ->
    start_percent = max(0, Float.round(Date.diff(period.starts_on, first_day) / total_days * 100, 3))
    end_percent = min(100, Float.round(Date.diff(period.ends_on, first_day) / total_days * 100, 3))
    width_percent = max(end_percent - start_percent, min_width)

    %{
      period: period,
      start_percent: start_percent,
      width_percent: width_percent
    }
  end)

  vacation_periods = Enum.filter(period_positions, & &1.period.is_school_vacation)
  holiday_periods = Enum.filter(period_positions, & &1.period.is_public_holiday && !&1.period.is_school_vacation)
  sorted_display_periods =
    vacation_periods ++ holiday_periods
    |> Enum.sort_by(& &1.period.starts_on)
    |> Enum.take(3)
%>

<!-- Timeline -->
<div class="relative mb-8">
  <!-- Background bar with colored sections -->
  <div class="relative h-4 bg-gray-200 rounded overflow-hidden">
    <!-- Vacation periods (green) -->
    <%= for %{period: period, start_percent: start, width_percent: width} <- vacation_periods do %>
      <div class="absolute top-0 h-full <%= if period.html_class == "success", do: "bg-green-500", else: "bg-green-400" %> rounded" style="left:<%= start %>% ; width:<%= width %>%;"></div>
    <% end %>
    
    <!-- Holiday periods (blue) -->
    <%= for %{period: _period, start_percent: start, width_percent: width} <- holiday_periods do %>
      <div class="absolute top-0 h-full bg-blue-400 rounded" style="left:<%= start %>% ; width:<%= width %>%;"></div>
    <% end %>
  </div>

  <!-- Month divider lines -->
  <div class="pointer-events-none absolute inset-0 z-10">
    <%= for percent <- [0 | month_markers] do %>
      <div class="absolute inset-y-0 w-px bg-gray-500" style="left:<%= percent %>%"></div>
    <% end %>
  </div>

  <!-- Numbered markers for annotated periods -->
  <%= for {%{period: _period, start_percent: start, width_percent: width}, index} <- Enum.with_index(sorted_display_periods, 1) do %>
    <% center_percent = start + width / 2 %>
    <span class="flex items-center justify-center w-5 h-5 rounded-full bg-white text-[0.85rem] font-semibold text-gray-800
                absolute top-[18px] -translate-x-1/2" style="left:<%= center_percent %>%">
      <%= case index do %>
        <% 1 -> %> ①
        <% 2 -> %> ②
        <% 3 -> %> ③
        <% _ -> %> <%= index %>
      <% end %>
    </span>
  <% end %>

  <!-- Month labels -->
  <div class="pointer-events-none select-none text-xs text-gray-600">
    <%= for {day, percent} <- [{first_day, 0} | month_labels] do %>
      <span class="absolute -top-5 pl-0.5" style="left:<%= percent %>%">
        1.&nbsp;<%= @months[day.month] |> String.slice(0, 3) %>
      </span>
    <% end %>
  </div>
</div>

<!-- Period list with annotations -->
<ul class="text-sm leading-6">
  <%= for {%{period: period}, index} <- Enum.with_index(sorted_display_periods, 1) do %>
    <li class="flex items-center gap-3">
      <span class="inline-block w-3 h-3 rounded <%= if period.is_school_vacation, do: if(period.html_class == "success", do: "bg-green-500", else: "bg-green-400"), else: "bg-blue-400" %>"></span>
      <span>
        <strong><%= MehrSchulferienWeb.ViewHelpers.format_date_range(period.starts_on, period.ends_on, :short) %>:</strong>
        <%= period.holiday_or_vacation_type.name %> 
        <%= case index do %>
          <% 1 -> %> ①
          <% 2 -> %> ②
          <% 3 -> %> ③
          <% _ -> %> <%= index %>
        <% end %>
      </span>
    </li>
  <% end %>
</ul> 