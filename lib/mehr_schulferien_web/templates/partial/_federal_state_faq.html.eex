<% off_school_yesterday_answer = FaqViewHelpers.is_off_school_answer(@yesterdays_school_free_periods, @yesterday, @location) %>
<% off_school_today_answer = FaqViewHelpers.is_off_school_answer(@todays_school_free_periods, @today, @location) %>
<% off_school_tomorrow_answer = FaqViewHelpers.is_off_school_answer(@tomorrows_school_free_periods, @tomorrow, @location) %>
<% off_school_day_after_tomorrow_answer = FaqViewHelpers.is_off_school_answer(@day_after_tomorrows_school_free_periods, @day_after_tomorrow, @location) %>
<% next_school_vacation_answer = FaqViewHelpers.next_school_vacation_answer(@location, @school_periods) %>

<% public_holiday_yesterday_answer = FaqViewHelpers.is_public_holiday_answer(@yesterdays_public_holiday_periods, @yesterday, @location) %>
<% public_holiday_today_answer = FaqViewHelpers.is_public_holiday_answer(@todays_public_holiday_periods, @today, @location) %>
<% public_holiday_tomorrow_answer = FaqViewHelpers.is_public_holiday_answer(@tomorrows_public_holiday_periods, @tomorrow, @location) %>
<% public_holiday_day_after_tomorrow_answer = FaqViewHelpers.is_public_holiday_answer(@day_after_tomorrows_public_holiday_periods, @day_after_tomorrow, @location) %>
<% public_periods = Enum.filter(@public_periods, & &1.is_public_holiday) %>
<% next_public_holiday_answer = FaqViewHelpers.next_public_holiday_answer(@location, public_periods) %>

<div class="row">
  <div class="col-xs-12">
  <p>Antworten zu häufigen Fragen zum Thema Schulferien und Feiertagen in <%= @location.name %>.</p>

  <h3>Schulferien</h3>
  <dl class="row">

    <dt class="col-sm-5">Wann sind die nächsten Schulferien?</strong></dt>
    <dd class="col-sm-7">
      <%= next_school_vacation_answer %>
    </dd>

    <dt class="col-sm-5">War gestern schulfrei in <%= @location.name %>?</dt>
    <dd class="col-sm-7">
      <%= off_school_yesterday_answer %>
    </dd>

    <dt class="col-sm-5">Ist heute schulfrei in <%= @location.name %>?</strong></dt>
    <dd class="col-sm-7">
      <%= off_school_today_answer %>
    </dd>

    <dt class="col-sm-5">Ist morgen schulfrei in <%= @location.name %>?</strong></dt>
    <dd class="col-sm-7">
      <%= off_school_tomorrow_answer %>
    </dd>

    <dt class="col-sm-5">Ist übermorgen schulfrei in <%= @location.name %>?</dt>
    <dd class="col-sm-7">
      <%= off_school_day_after_tomorrow_answer %>
    </dd>

    <dt class="col-sm-5">Wann sind die nächsten Schulferien in <%= @location.name %>?</dt>
    <dd class="col-sm-7">
      <%= next_school_vacation_answer %>
    </dd>

    <dt class="col-sm-5">Für welche Städte gelten diese Feriendaten?</strong></dt>
    <dd class="col-sm-7">
      <%= link "Landkreise und Städte in #{@federal_state.name}", to: Routes.federal_state_path(@conn, :county_show, @country.slug, @federal_state.slug) %>
    </dd>

    <% sorted_periods = Enum.sort(public_periods ++ @school_periods, &(Date.compare(&1.starts_on, &2.starts_on) == :lt)) %>
    <dt class="col-sm-5">Schulferien <%= @location.name %></dt>
    <dd class="col-sm-7">
      <% next_schulferien_periods = MehrSchulferien.Periods.next_periods(sorted_periods, 3) %>
      <%= for period <- next_schulferien_periods do %>
        <span>
          <% month = @months[period.starts_on.month] %>
          <%= link to: "##{String.downcase(month)}#{period.starts_on.year}" do %>
            <%= period.holiday_or_vacation_type.colloquial %>
            &nbsp(<%= ViewHelpers.format_date_range(period.starts_on, period.ends_on, :short) %>)
          <% end %><%= unless period == List.last(next_schulferien_periods) do %>,&nbsp<% end %>
        </span>
      <% end %>
    </dd>

    <% grouped_periods = Enum.chunk_by(sorted_periods, & &1.starts_on.year) %>
    <%= for periods <- grouped_periods do %>
      <% first_period = Enum.at(periods, 0) %>
      <dt class="col-sm-5">Schulfrei <%= @location.name %> <%= first_period.starts_on.year %></dt>
      <dd class="col-sm-7">
        <%= for period <- periods do %>
          <span>
            <% month = @months[period.starts_on.month] %>
            <%= link to: "##{String.downcase(month)}#{period.starts_on.year}" do %>
              <%= period.holiday_or_vacation_type.colloquial %>
              &nbsp(<%= ViewHelpers.format_date_range(period.starts_on, period.ends_on, :short) %>)
            <% end %><%= unless period == List.last(periods) do %>,&nbsp<% end %>
          </span>
        <% end %>
      </dd>
    <% end %>

    <% year_school_periods = Enum.chunk_by(@school_periods, & &1.starts_on.year) %>
    <%= for year_periods <- year_school_periods do %>
      <% periods_groups = year_periods |> Enum.group_by(& &1.holiday_or_vacation_type.name) |> Map.values() %>
      <%= for periods <- periods_groups do %>
        <% period = Enum.at(periods, 0) %>
        <%= if period.starts_on.year == @current_year do %>
          <% periods = Enum.filter(periods, & Date.compare(&1.starts_on, @today) == :gt) %>
          <%= if periods != [] do %>
            <dt class="col-sm-5"><%= period.holiday_or_vacation_type.colloquial %> <%= @location.name %></dt>
            <dd class="col-sm-7">
              <%= for period <- periods do %>
                <% month = @months[period.starts_on.month] %>
                <%= link to: "##{String.downcase(month)}#{period.starts_on.year}" do %>
                  <%= ViewHelpers.format_date_range(period.starts_on, period.ends_on) %>
                <% end %><%= unless period == List.last(periods) do %>,&nbsp<% end %>
              <% end %>
            </dd>
          <% end %>
        <% end %>

        <dt class="col-sm-5"><%= period.holiday_or_vacation_type.colloquial %> <%= period.starts_on.year %> <%= @location.name %></dt>
        <dd class="col-sm-7">
          <%= for period <- periods do %>
            <% month = @months[period.starts_on.month] %>
            <%= link to: "##{String.downcase(month)}#{period.starts_on.year}" do %>
              <%= ViewHelpers.format_date_range(period.starts_on, period.ends_on) %>
            <% end %><%= unless period == List.last(periods) do %>,&nbsp<% end %>
          <% end %>
        </dd>

        <dt class="col-sm-5"><%= period.holiday_or_vacation_type.colloquial %> <%= @location.name %> <%= period.starts_on.year %></dt>
        <dd class="col-sm-7">
          <%= for period <- periods do %>
            <% month = @months[period.starts_on.month] %>
            <%= link to: "##{String.downcase(month)}#{period.starts_on.year}" do %>
              <%= ViewHelpers.format_date_range(period.starts_on, period.ends_on) %>
            <% end %><%= unless period == List.last(periods) do %>,&nbsp<% end %>
          <% end %>
        </dd>
      <% end %>
    <% end %>

  </dl>

  <h3>Feiertage</h3>
  <dl class="row">
    <dt class="col-sm-5">War gestern ein Feiertag in <%= @location.name %>?</dt>
    <dd class="col-sm-7">
      <%= public_holiday_yesterday_answer %>
    </dd>

    <dt class="col-sm-5">Ist heute ein Feiertag in <%= @location.name %>?</dt>
    <dd class="col-sm-7">
      <%= public_holiday_today_answer %>
    </dd>

    <dt class="col-sm-5">Ist morgen ein Feiertag in <%= @location.name %>?</dt>
    <dd class="col-sm-7">
      <%= public_holiday_tomorrow_answer %>
    </dd>

    <dt class="col-sm-5">Ist übermorgen ein Feiertag in <%= @location.name %>?</dt>
    <dd class="col-sm-7">
      <%= public_holiday_day_after_tomorrow_answer %>
    </dd>

    <dt class="col-sm-5">Wann ist der nächste Feiertag in <%= @location.name %>?</dt>
    <dd class="col-sm-7">
      <%= next_public_holiday_answer %>
    </dd>
  </dl>

  </div>
</div>

<% main_entity = [] %>
<% main_entity = main_entity ++ [
  %{"@type" => "Question", "name" => "War gestern schulfrei in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{off_school_yesterday_answer}"}},
  %{"@type" => "Question", "name" => "Ist heute schulfrei in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{off_school_today_answer}"}},
  %{"@type" => "Question", "name" => "Ist morgen schulfrei in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{off_school_tomorrow_answer}"}},
  %{"@type" => "Question", "name" => "Ist übermorgen schulfrei in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{off_school_day_after_tomorrow_answer}"}},
  %{"@type" => "Question", "name" => "Wann sind die nächsten Schulferien in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{next_school_vacation_answer}"}},
  %{"@type" => "Question", "name" => "Schulferien #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{Enum.map_join(next_schulferien_periods, " ", &"#{&1.holiday_or_vacation_type.colloquial} (#{ViewHelpers.format_date_range(&1.starts_on, &1.ends_on, :short)})")}"}}
] %>
<% main_entity = main_entity ++ Enum.map(grouped_periods, fn periods ->
  first_period = Enum.at(periods, 0)
  %{"@type" => "Question", "name" => "Schulferien #{@location.name} #{first_period.starts_on.year}", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{Enum.map_join(periods, " ", &"#{&1.holiday_or_vacation_type.colloquial} (#{ViewHelpers.format_date_range(&1.starts_on, &1.ends_on, :short)})")}"}}
end) %>
<% main_entity = main_entity ++ [
  %{"@type" => "Question", "name" => "War gestern ein Feiertag in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{public_holiday_yesterday_answer}"}},
  %{"@type" => "Question", "name" => "Ist heute ein Feiertag in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{public_holiday_today_answer}"}},
  %{"@type" => "Question", "name" => "Ist morgen ein Feiertag in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{public_holiday_tomorrow_answer}"}},
  %{"@type" => "Question", "name" => "Ist übermorgen ein Feiertag in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{public_holiday_day_after_tomorrow_answer}"}}
] %>
<% main_entity = main_entity ++ Enum.flat_map(year_school_periods, fn year_periods ->
  periods_groups = year_periods |> Enum.group_by(& &1.holiday_or_vacation_type.name) |> Map.values()
  Enum.flat_map(periods_groups, fn periods ->
    period = Enum.at(periods, 0)
    if period.starts_on.year == @current_year do
      periods = Enum.filter(periods, & Date.compare(&1.starts_on, @today) == :gt)
      Enum.map(periods, fn period ->
        %{"@type" => "Question", "name" => "#{period.holiday_or_vacation_type.colloquial} #{@location.name}", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{ViewHelpers.format_date_range(period.starts_on, period.ends_on)}"}}
      end)
    else
      []
    end
  end)
end) %>
<% main_entity = main_entity ++ Enum.flat_map(year_school_periods, fn year_periods ->
  periods_groups = year_periods |> Enum.group_by(& &1.holiday_or_vacation_type.name) |> Map.values()
  Enum.flat_map(periods_groups, fn periods ->
    Enum.flat_map(periods, fn period ->
      [
        %{"@type" => "Question", "name" => "#{period.holiday_or_vacation_type.colloquial} #{period.starts_on.year} #{@location.name}", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{ViewHelpers.format_date_range(period.starts_on, period.ends_on)}"}},
        %{"@type" => "Question", "name" => "#{period.holiday_or_vacation_type.colloquial} #{@location.name} #{period.starts_on.year}", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{ViewHelpers.format_date_range(period.starts_on, period.ends_on)}"}}
      ]
    end)
  end)
end) %>
<% main_entity = main_entity ++ [
  %{"@type" => "Question", "name" => "Wann ist der nächste Feiertag in #{@location.name}?", "acceptedAnswer" => %{"@type" => "Answer", "text" => "#{next_public_holiday_answer}"}}
] %>
<script type="application/ld+json">
<%= Jason.encode!(%{
  "@context" => "https://schema.org",
  "@type" => "FAQPage",
  "mainEntity" => main_entity
}) %>
</script>
