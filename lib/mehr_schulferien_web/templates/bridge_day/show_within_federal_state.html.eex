<%
  alias MehrSchulferien.Calendars.DateHelpers
  reference_date = MehrSchulferienWeb.BridgeDayView.get_reference_date(@conn)
  today = Date.utc_today()  # Get today's date for comparison

  # Function to find adjacent holidays (holidays that are near each other or part of the same holiday period)
  find_adjacent_holidays = fn periods, holiday ->
    # First identify all holidays that are adjacent to or related to the input holiday
    adjacent = Enum.filter(periods, fn period ->
      if period.is_public_holiday && period != holiday do
        # Get the holiday name for grouping related holidays
        holiday_name = holiday.holiday_or_vacation_type && holiday.holiday_or_vacation_type.name
        period_name = period.holiday_or_vacation_type && period.holiday_or_vacation_type.name
        
        # Same holiday group by name (e.g., both contain "Ostern" or "Weihnacht")
        same_holiday_group = 
          holiday_name && period_name && 
          (String.contains?(holiday_name, "Ostern") && String.contains?(period_name, "Ostern") ||
           String.contains?(holiday_name, "Weihnacht") && String.contains?(period_name, "Weihnacht") ||
           String.contains?(holiday_name, "Pfingst") && String.contains?(period_name, "Pfingst"))
        
        # Check if within 3 days of each other or overlapping to catch more related holidays
        adjacent_before = Date.compare(period.ends_on, holiday.starts_on) == :lt && 
                         Date.diff(holiday.starts_on, period.ends_on) <= 3
        adjacent_after = Date.compare(period.starts_on, holiday.ends_on) == :gt && 
                        Date.diff(period.starts_on, holiday.ends_on) <= 3
        overlapping = Date.compare(period.starts_on, holiday.ends_on) != :gt && 
                     Date.compare(period.ends_on, holiday.starts_on) != :lt
                    
        same_holiday_group || adjacent_before || adjacent_after || overlapping
      else
        false
      end
    end)
    
    # Return the set with the original holiday and all adjacent ones
    [holiday | adjacent]
  end
%>

<div class="mt-4 sm:mt-8">
  <% # Dynamic Teaser Calculation %>
  <% all_bridge_days = Enum.flat_map(@bridge_day_map, fn {_k, v} -> v || [] end) %>
  <% min_leave = Enum.map(all_bridge_days, & &1.number_days) |> Enum.sum() %>
  <% max_free = Enum.map(all_bridge_days, fn bd ->
    periods = MehrSchulferien.Periods.list_periods_with_bridge_day(@public_periods, bd)
    MehrSchulferienWeb.BridgeDayView.get_number_max_days(periods)
  end) |> Enum.sum() %>

  <div class="flex flex-col items-start mb-6 sm:flex-row sm:justify-between">
    <div class="mb-4 sm:mb-0">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Brückentage <%= @year %> in <%= @federal_state.name %></h1>
      <h2 class="text-xl text-gray-700">
        Die <%= @bridge_day_proposal_count %> besten Tipps für <%= if min_leave > 0 and max_free > 0 do %><%= round((max_free - min_leave) / min_leave * 100) %>%<% end %> mehr Urlaub.
      </h2>
    </div>

    <div class="w-full sm:w-auto">
      <% prev_year = @year - 1 %>
      <% next_year = @year + 1 %>
      <% show_prev = MehrSchulferienWeb.BridgeDayController.has_bridge_days?([@country.id, @federal_state.id], prev_year) %>
      <% show_next = MehrSchulferienWeb.BridgeDayController.has_bridge_days?([@country.id, @federal_state.id], next_year) %>
      <% show_next_next = MehrSchulferienWeb.BridgeDayController.has_bridge_days?([@country.id, @federal_state.id], next_year + 1) %>
      
      <% prev_link = if show_prev, do: Routes.bridge_day_path(@conn, :show_within_federal_state, @country.slug, @federal_state.slug, prev_year), else: nil %>
      <% next_link = if show_next, do: Routes.bridge_day_path(@conn, :show_within_federal_state, @country.slug, @federal_state.slug, next_year), else: nil %>
      
      <div class="sm:flex sm:items-center sm:space-x-4">
        <div class="hidden sm:block">
          <%= if flag_src = MehrSchulferien.Locations.Flag.get_flag(@federal_state.code) do %>
            <img class="rounded shadow-sm" src="<%= flag_src %>" width="64" height="38" alt="Landesflage <%= @federal_state.name %>">
          <% end %>
        </div>
        
        <div class="w-full">
          <div class="inline-flex rounded-md shadow-sm w-full" role="group">
            <div class="flex w-full">
              <%= if show_prev do %>
              <a class="px-4 py-2 text-sm font-medium bg-white text-gray-700 border border-gray-200 hover:bg-gray-100 hover:text-blue-700 rounded-l-lg flex items-center" href="<%= prev_link %>">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </a>
              <% else %>
              <div class="px-4 py-2 text-sm font-medium bg-gray-50 text-gray-400 border border-gray-200 rounded-l-lg flex items-center cursor-not-allowed">
                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </div>
              <% end %>

              <div class="flex flex-grow">
                <% 
                  # Determine which years to show (max 3)
                  years_to_show = []
                  years_to_show = if show_prev, do: years_to_show ++ [prev_year], else: years_to_show
                  years_to_show = years_to_show ++ [@year]
                  years_to_show = if show_next && length(years_to_show) < 3, do: years_to_show ++ [next_year], else: years_to_show
                  years_to_show = if show_next_next && length(years_to_show) < 3, do: years_to_show ++ [next_year + 1], else: years_to_show
                %>
                
                <%= for year <- years_to_show do %>
                  <%= if year == @year do %>
                    <span class="px-4 py-2 text-sm font-medium bg-blue-600 text-white border border-blue-600 flex-1 text-center">
                      <%= year %>
                    </span>
                  <% else %>
                    <a class="px-4 py-2 text-sm font-medium bg-white text-gray-700 border border-gray-200 hover:bg-gray-100 hover:text-blue-700 flex-1 text-center" 
                       href="<%= Routes.bridge_day_path(@conn, :show_within_federal_state, @country.slug, @federal_state.slug, year) %>">
                      <%= year %>
                    </a>
                  <% end %>
                <% end %>
              </div>

                                      <%= if show_next do %>
               <a class="px-4 py-2 text-sm font-medium bg-white text-gray-700 border border-gray-200 hover:bg-gray-100 hover:text-blue-700 rounded-r-lg flex items-center" href="<%= next_link %>">
                 <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                 </svg>
               </a>
               <% else %>
               <div class="px-4 py-2 text-sm font-medium bg-gray-50 text-gray-400 border border-gray-200 rounded-r-lg flex items-center cursor-not-allowed">
                 <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                 </svg>
               </div>
               <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <% # Year Links as Natural Sentence %>
  <% current_year = @year %>
  <% years = Enum.filter([current_year, current_year + 1, current_year + 2], fn y ->
    MehrSchulferienWeb.BridgeDayController.has_bridge_days?([@country.id, @federal_state.id], y)
  end) %>
  <% future_years = Enum.filter(years, &(&1 > current_year)) %>

  <% # Optional: Short intro text %>
  <p class="text-gray-700 mb-8">
    Nicht nur klassische Brückentage, sondern auch Super-Brückentage, bei denen Sie noch mehr freie Tage herausholen können.
    <%= if Enum.any?(future_years) do %>
      Entdecken Sie jetzt die besten Tipps für Ihre Urlaubsplanung <%= @year %> – und werfen Sie auch einen Blick auf
      <%= for {year, idx} <- Enum.with_index(future_years) do %>
        <%= if idx > 0, do: if(idx == length(future_years) - 1, do: " und ", else: ", ") %>
        <%= link "Brückentage #{year}#{if idx == length(future_years) - 1, do: ".", else: ""}", to: Routes.bridge_day_path(@conn, :show_within_federal_state, @country.slug, @federal_state.slug, year), class: "text-blue-600 hover:underline" %>
      <% end %>
    <% end %>
  </p>

  <%
    # Prepare the JSON-LD data for all bridge days
    json_ld_bridge_days = Enum.flat_map(2..5, fn num ->
      if @bridge_day_map[num] do
        Enum.map(@bridge_day_map[num] || [], fn bridge_day ->
          # Calculate related data
          all_periods = MehrSchulferien.Periods.list_periods_with_bridge_day(@public_periods, bridge_day)
          max_days = MehrSchulferienWeb.BridgeDayView.get_number_max_days(all_periods)
          efficiency_percentage = round((max_days - bridge_day.number_days) / bridge_day.number_days * 100)
          
          # Find related holiday
          window_start = Date.add(bridge_day.starts_on, -5)
          window_end = Date.add(bridge_day.ends_on, 5)
          
          relevant_periods = Enum.filter(@public_periods, fn period ->
            Date.compare(period.ends_on, window_start) != :lt &&
            Date.compare(period.starts_on, window_end) != :gt &&
            period.is_public_holiday
          end)
          
          holiday_before = Enum.find(relevant_periods, fn period -> 
            Date.compare(period.ends_on, bridge_day.starts_on) == :lt && 
            Date.diff(bridge_day.starts_on, period.ends_on) <= 3
          end)
          
          holiday_after = Enum.find(relevant_periods, fn period -> 
            Date.compare(period.starts_on, bridge_day.ends_on) == :gt && 
            Date.diff(period.starts_on, bridge_day.ends_on) <= 3
          end)
          
          related_holiday = holiday_before || holiday_after
          
          # Check if there are adjacent holidays
          adjacent_holidays = if related_holiday, do: find_adjacent_holidays.(relevant_periods, related_holiday), else: []
          
          # Format Event data
          month_header = MehrSchulferienWeb.BridgeDayView.format_month_header(bridge_day.starts_on, bridge_day.ends_on)
          event_name = month_header <> " " <> Integer.to_string(@year)
          
          # Format holiday name for display including adjacent holidays
          holiday_name = 
            cond do
              length(adjacent_holidays) > 1 ->
                # Multiple adjacent holidays - join their names
                adjacent_holidays 
                |> Enum.map(& &1.holiday_or_vacation_type.name)
                |> Enum.join(" und ")
              related_holiday && related_holiday.holiday_or_vacation_type ->
                related_holiday.holiday_or_vacation_type.name
              true ->
                nil
            end
          
          %{
            "@type" => "Event",
            "name" => event_name,
            "description" => "Brückentag in #{@federal_state.name}: Mit #{bridge_day.number_days} Urlaubstag(en) #{max_days} Tage frei (#{efficiency_percentage}% mehr)#{if holiday_name, do: " - Verbunden mit #{holiday_name}", else: ""}",
            "startDate" => Date.to_iso8601(bridge_day.starts_on),
            "endDate" => Date.to_iso8601(bridge_day.ends_on),
            "eventStatus" => "https://schema.org/EventScheduled",
            "location" => %{
              "@type" => "Place",
              "name" => @federal_state.name,
              "address" => %{
                "@type" => "PostalAddress",
                "addressRegion" => @federal_state.name,
                "addressCountry" => @country.name
              }
            },
            "organizer" => %{
              "@type" => "Organization",
              "name" => "MehrSchulferien.de",
              "url" => Routes.page_url(@conn, :new)
            }
          }
        end)
      else
        []
      end
    end)
  %>

  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "ItemList",
    "itemListElement": <%= Jason.encode!(Enum.with_index(json_ld_bridge_days, 1) |> Enum.map(fn {event, position} -> 
      Map.merge(%{"@type" => "ListItem", "position" => position}, %{"item" => event}) 
    end)) %>
  }
  </script>

  <%= for num <- 2..5 do %>
    <%= if @bridge_day_map[num] && Enum.count(@bridge_day_map[num]) > 0 do %>
      <h2 class="text-2xl font-bold text-gray-900 mb-4 mt-8">
        <%= if num == 2 do %>
          <%= if Enum.count(@bridge_day_map[num]) > 1 do %>Normale<% else %>Normaler<% end %>
        <% else %>
          <%= num - 1 %>er
        <% end %>
        <%= if Enum.count(@bridge_day_map[num]) > 1 do %>
          <%= if num > 2 do %>Super-Brückentage<% else %>Brückentage<% end %>
        <% else %>
          <%= if num > 2 do %>Super-Brückentag<% else %>Brückentag<% end %>
        <% end %>
      </h2>

      <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
        <%= for bridge_day <- @bridge_day_map[num] do %>
          <% 
            all_periods = MehrSchulferien.Periods.list_periods_with_bridge_day(@public_periods, bridge_day)
            
            # Get related periods to find the public holiday
            window_start = Date.add(bridge_day.starts_on, -5)
            window_end = Date.add(bridge_day.ends_on, 5)
            
            relevant_periods = Enum.filter(@public_periods, fn period ->
              Date.compare(period.ends_on, window_start) != :lt &&
              Date.compare(period.starts_on, window_end) != :gt &&
              period.is_public_holiday
            end)
            
            # Find the public holiday that creates this bridge day
            holiday_before = Enum.find(relevant_periods, fn period -> 
              Date.compare(period.ends_on, bridge_day.starts_on) == :lt && 
              Date.diff(bridge_day.starts_on, period.ends_on) <= 3
            end)
            
            holiday_after = Enum.find(relevant_periods, fn period -> 
              Date.compare(period.starts_on, bridge_day.ends_on) == :gt && 
              Date.diff(period.starts_on, bridge_day.ends_on) <= 3
            end)
            
            related_holiday = holiday_before || holiday_after
            
            # Check if there are adjacent holidays
            adjacent_holidays = if related_holiday, do: find_adjacent_holidays.(relevant_periods, related_holiday), else: []
            
            max_days = MehrSchulferienWeb.BridgeDayView.get_number_max_days(all_periods)
            efficiency_percentage = round((max_days - bridge_day.number_days) / bridge_day.number_days * 100)
            
            # Check if this bridge day is in the past (only when the current year matches the URL year)
            is_past_bridge_day = @year == today.year && Date.compare(bridge_day.ends_on, today) == :lt
          %>
          
          <section class="<%= if is_past_bridge_day, do: "bg-gray-100 text-gray-500", else: "bg-white" %> rounded shadow p-6 h-full">
            <h3 class="text-xl font-semibold mb-4 <%= if is_past_bridge_day, do: "text-gray-500", else: "" %>">
              <%= MehrSchulferienWeb.BridgeDayView.format_month_header(bridge_day.starts_on, bridge_day.ends_on) %> 
              <%= if bridge_day.starts_on.year == bridge_day.ends_on.year && !String.contains?(MehrSchulferienWeb.BridgeDayView.format_month_header(bridge_day.starts_on, bridge_day.ends_on), Integer.to_string(bridge_day.starts_on.year)) do %>
                <span class="<%= if is_past_bridge_day, do: "text-gray-400", else: "text-gray-500" %>"><%= bridge_day.starts_on.year %></span>
              <% end %>
            </h3>
            
            <%= MehrSchulferienWeb.BridgeDayTimelineComponent.bridge_day_timeline(%{
              bridge_day: bridge_day,
              periods: adjacent_holidays,
              reference_date: reference_date,
              vacation_days: bridge_day.number_days,
              total_free_days: max_days,
              efficiency_percentage: efficiency_percentage,
              is_past: is_past_bridge_day
            }) %>
          </section>
        <% end %>
      </div>
    <% end %>
  <% end %>

  <%= if @bridge_day_map[2] && Enum.count(@bridge_day_map[2]) > 0 do %>
    <div class="mt-12 mb-8">
      <h2 class="text-2xl font-bold text-gray-900 mb-6">Brückentag-FAQ</h2>
      
      <div class="bg-white rounded shadow p-6">
        <dl class="divide-y divide-gray-200">
          <div class="py-4">
            <dt class="text-lg font-medium text-gray-800">Wie viele Brückentage <%= @year %> <%= @federal_state.name %>?</dt>
            <dd class="mt-2 text-gray-700">
              In <%= @year %> gibt es in <%= @federal_state.name %> <%= Enum.count(@bridge_day_map[2]) %> <%= if Enum.count(@bridge_day_map[2]) == 1, do: "normalen Brückentag", else: "normale Brückentage" %>.
              Zusätzlich gibt es noch <%= @bridge_day_proposal_count - Enum.count(@bridge_day_map[2]) %> <%= if @bridge_day_proposal_count - Enum.count(@bridge_day_map[2]) == 1, do: "Super-Brückentag", else: "Super-Brückentage" %>.
              
              <div class="mt-4">
                <ul class="list-disc pl-5 space-y-2">
                  <% # Gather all bridge days with their related public holidays %>
                  <% all_bridge_days = Enum.flat_map(@bridge_day_map, fn {k, v} -> Enum.map(v || [], fn bd -> {k, bd} end) end) %>
                  
                  <% # Sort bridge days by date %>
                  <% sorted_bridge_days = Enum.sort_by(all_bridge_days, fn {_, bd} -> Date.to_erl(bd.starts_on) end) %>
                  
                  <% # Filter out Super-Brückentage if normal Brückentag exists for same holiday %>
                  <% filtered_bridge_days = Enum.reduce(sorted_bridge_days, [], fn {num, bridge_day}, acc ->
                      # Get related holiday
                      window_start = Date.add(bridge_day.starts_on, -5)
                      window_end = Date.add(bridge_day.ends_on, 5)
                      
                      relevant_periods = Enum.filter(@public_periods, fn period ->
                        Date.compare(period.ends_on, window_start) != :lt &&
                        Date.compare(period.starts_on, window_end) != :gt &&
                        period.is_public_holiday
                      end)
                      
                      holiday_before = Enum.find(relevant_periods, fn period -> 
                        Date.compare(period.ends_on, bridge_day.starts_on) == :lt && 
                        Date.diff(bridge_day.starts_on, period.ends_on) <= 3
                      end)
                      
                      holiday_after = Enum.find(relevant_periods, fn period -> 
                        Date.compare(period.starts_on, bridge_day.ends_on) == :gt && 
                        Date.diff(period.starts_on, bridge_day.ends_on) <= 3
                      end)
                      
                      related_holiday = holiday_before || holiday_after
                      holiday_name = if related_holiday && related_holiday.holiday_or_vacation_type, 
                        do: related_holiday.holiday_or_vacation_type.name, 
                        else: nil

                      # Check if we already have a bridge day for this holiday
                      duplicate = Enum.find(acc, fn {_, _bd, hol_name} -> 
                        hol_name == holiday_name && hol_name != nil
                      end)
                      
                      # Only add if not a duplicate, or if this is a normal bridge day and duplicate is a super
                      if duplicate == nil || (num == 2 && elem(duplicate, 0) > 2) do
                        # If this is a normal bridge day and there's a duplicate super bridge day, replace it
                        if num == 2 && duplicate != nil do
                          List.delete(acc, duplicate) ++ [{num, bridge_day, holiday_name}]
                        else
                          acc ++ [{num, bridge_day, holiday_name}]
                        end
                      else
                        acc
                      end
                    end) %>
                  
                  <%= for {num, bridge_day, holiday_name} <- filtered_bridge_days do %>
                    <% 
                      # Format type name with "3er" prefix for Super-Brückentage
                      type_name = cond do
                        num > 2 && Date.diff(bridge_day.ends_on, bridge_day.starts_on) > 0 -> "#{num-1}er Super-Brückentage"
                        num > 2 -> "#{num-1}er Super-Brückentag"
                        Date.diff(bridge_day.ends_on, bridge_day.starts_on) > 0 -> "Brückentage"
                        true -> "Brückentag"
                      end
                    %>
                    <li>
                      <strong><%= 
                        date_string = if Date.compare(bridge_day.starts_on, bridge_day.ends_on) == :eq do
                          Calendar.strftime(bridge_day.starts_on, "%d.%m.%Y")
                        else
                          Calendar.strftime(bridge_day.starts_on, "%d.%m.") <> " - " <> Calendar.strftime(bridge_day.ends_on, "%d.%m.%Y")
                        end
                        date_string
                      %></strong>: 
                      <%= type_name %><%= if holiday_name, do: " (#{holiday_name})", else: "" %>
                    </li>
                  <% end %>
                </ul>
              </div>
            </dd>
          </div>
          
          <div class="py-4">
            <dt class="text-lg font-medium text-gray-800">Was ist der beste Brückentag <%= @year %> in <%= @federal_state.name %>?</dt>
            <dd class="mt-2 text-gray-700">
              <% best_bridge_day = Enum.flat_map(@bridge_day_map, fn {_k, v} -> v || [] end)
                |> Enum.max_by(fn bd ->
                  periods = MehrSchulferien.Periods.list_periods_with_bridge_day(@public_periods, bd)
                  max_days = MehrSchulferienWeb.BridgeDayView.get_number_max_days(periods)
                  round((max_days - bd.number_days) / bd.number_days * 100)
                end) %>
              <% periods = MehrSchulferien.Periods.list_periods_with_bridge_day(@public_periods, best_bridge_day) %>
              <% max_days = MehrSchulferienWeb.BridgeDayView.get_number_max_days(periods) %>
              <% percentage = round((max_days - best_bridge_day.number_days) / best_bridge_day.number_days * 100) %>
              Der beste Brückentag ist <%= ViewHelpers.format_date_range(best_bridge_day.starts_on, best_bridge_day.ends_on) %>. Mit nur <%= best_bridge_day.number_days %> Urlaubstag(en) können Sie <%= max_days %> Tage frei machen - das sind <%= percentage %>% mehr Urlaub!
            </dd>
          </div>

          <% # Only show "next bridge day" question if the viewed year is the same as the reference date year %>
          <% show_next_bridge_day = reference_date.year == @year %>
          <%= if show_next_bridge_day do %>
          <div class="py-4">
            <dt class="text-lg font-medium text-gray-800">Wann ist der nächste Brückentag in <%= @federal_state.name %>?</dt>
            <dd class="mt-2 text-gray-700">
              <% next_bridge_day = Enum.flat_map(@bridge_day_map, fn {_k, v} -> v || [] end)
                |> Enum.filter(fn bd -> Date.compare(bd.starts_on, reference_date) == :gt end)
                |> Enum.sort_by(fn bd -> bd.starts_on end)
                |> List.first %>
              <%= if next_bridge_day do %>
                <% window_start = Date.add(next_bridge_day.starts_on, -5) %>
                <% window_end = Date.add(next_bridge_day.ends_on, 5) %>
                <% relevant_periods = Enum.filter(@public_periods, fn period ->
                  Date.compare(period.ends_on, window_start) != :lt &&
                  Date.compare(period.starts_on, window_end) != :gt &&
                  period.is_public_holiday
                end) %>
                <% holiday_before = Enum.find(relevant_periods, fn period -> 
                  Date.compare(period.ends_on, next_bridge_day.starts_on) == :lt && 
                  Date.diff(next_bridge_day.starts_on, period.ends_on) <= 3
                end) %>
                <% holiday_after = Enum.find(relevant_periods, fn period -> 
                  Date.compare(period.starts_on, next_bridge_day.ends_on) == :gt && 
                  Date.diff(period.starts_on, next_bridge_day.ends_on) <= 3
                end) %>
                <% related_holiday = holiday_before || holiday_after %>
                
                <% # Check if there are adjacent holidays %>
                <% adjacent_holidays = if related_holiday, do: find_adjacent_holidays.(relevant_periods, related_holiday), else: [] %>
                
                <% # Format holiday name for display including adjacent holidays %>
                <% holiday_name = 
                  cond do
                    length(adjacent_holidays) > 1 ->
                      # Multiple adjacent holidays - join their names
                      adjacent_holidays 
                      |> Enum.map(& &1.holiday_or_vacation_type.name)
                      |> Enum.join(" und ")
                    related_holiday && related_holiday.holiday_or_vacation_type ->
                      related_holiday.holiday_or_vacation_type.name
                    true ->
                      nil
                  end
                %>
                Der nächste Brückentag in <%= @federal_state.name %> ist am <%= ViewHelpers.format_date_range(next_bridge_day.starts_on, next_bridge_day.ends_on) %><%= if holiday_name, do: " (" <> holiday_name <> ")", else: "" %>.
              <% else %>
                Für dieses Jahr sind keine weiteren Brückentage in <%= @federal_state.name %> geplant.
              <% end %>
            </dd>
          </div>
          <% end %>
        </dl>
      </div>
    </div>

    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": [{
        "@type": "Question",
        "name": "Wie viele Brückentage <%= @year %> <%= @federal_state.name %>?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "In <%= @year %> gibt es in <%= @federal_state.name %> <%= Enum.count(@bridge_day_map[2]) %> <%= if Enum.count(@bridge_day_map[2]) == 1, do: "normalen Brückentag", else: "normale Brückentage" %>. Zusätzlich gibt es noch <%= @bridge_day_proposal_count - Enum.count(@bridge_day_map[2]) %> <%= if @bridge_day_proposal_count - Enum.count(@bridge_day_map[2]) == 1, do: "Super-Brückentag", else: "Super-Brückentage" %>.<% 
            # Gather and process bridge days for JSON output
            all_bridge_days = Enum.flat_map(@bridge_day_map, fn {k, v} -> 
              Enum.map(v || [], fn bd -> {k, bd} end) 
            end)

            # Sort bridge days by date
            sorted_bridge_days = Enum.sort_by(all_bridge_days, fn {_, bd} -> Date.to_erl(bd.starts_on) end)
            
            # Filter out Super-Brückentage if normal Brückentag exists for same holiday
            filtered_bridge_days = Enum.reduce(sorted_bridge_days, [], fn {k, bd}, acc ->
              # Get related holiday
              window_start = Date.add(bd.starts_on, -5)
              window_end = Date.add(bd.ends_on, 5)
              relevant_periods = Enum.filter(@public_periods, fn period ->
                Date.compare(period.ends_on, window_start) != :lt &&
                Date.compare(period.starts_on, window_end) != :gt &&
                period.is_public_holiday
              end)
              holiday_before = Enum.find(relevant_periods, fn period -> 
                Date.compare(period.ends_on, bd.starts_on) == :lt && 
                Date.diff(bd.starts_on, period.ends_on) <= 3
              end)
              holiday_after = Enum.find(relevant_periods, fn period -> 
                Date.compare(period.starts_on, bd.ends_on) == :gt && 
                Date.diff(period.starts_on, bd.ends_on) <= 3
              end)
              related_holiday = holiday_before || holiday_after
              holiday_name = if related_holiday && related_holiday.holiday_or_vacation_type, 
                do: related_holiday.holiday_or_vacation_type.name, 
                else: nil
              
              # Check if we already have a bridge day for this holiday
              duplicate = Enum.find(acc, fn {_, _bd, hol_name} -> 
                hol_name == holiday_name && hol_name != nil
              end)
              
              # Only add if not a duplicate, or if this is a normal bridge day and duplicate is a super
              if duplicate == nil || (k == 2 && elem(duplicate, 0) > 2) do
                # If this is a normal bridge day and there's a duplicate super bridge day, replace it
                if k == 2 && duplicate != nil do
                  List.delete(acc, duplicate) ++ [{k, bd, holiday_name}]
                else
                  acc ++ [{k, bd, holiday_name}]
                end
              else
                acc
              end
            end)
            
            # Format filtered bridge days for JSON output
            bridgeday_list = filtered_bridge_days |> Enum.map(fn {k, bd, holiday_name} ->
              # Format type name with "3er" prefix
              type_name = cond do
                k > 2 && Date.diff(bd.ends_on, bd.starts_on) > 0 -> "#{k-1}er Super-Brückentage"
                k > 2 -> "#{k-1}er Super-Brückentag"
                Date.diff(bd.ends_on, bd.starts_on) > 0 -> "Brückentage"
                true -> "Brückentag"
              end
              
              # Format date range
                              date_string = if Date.compare(bd.starts_on, bd.ends_on) == :eq do
                  Calendar.strftime(bd.starts_on, "%d.%m.%Y")
                else
                  Calendar.strftime(bd.starts_on, "%d.%m.") <> " - " <> Calendar.strftime(bd.ends_on, "%d.%m.%Y")
                end
                
                # Create display string
                holiday_text = if holiday_name, do: " (#{holiday_name})", else: ""
              "#{date_string}: #{type_name}#{holiday_text}"
            end) |> Enum.join(", ")
          %><%= bridgeday_list %>."
        }
      },
      {
        "@type": "Question",
        "name": "Was ist der beste Brückentag <%= @year %> in <%= @federal_state.name %>?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "Der beste Brückentag ist <%= ViewHelpers.format_date_range(best_bridge_day.starts_on, best_bridge_day.ends_on) %>. Mit nur <%= best_bridge_day.number_days %> Urlaubstag(en) können Sie <%= max_days %> Tage frei machen - das sind <%= percentage %>% mehr Urlaub!"
        }
      }
      <%= if show_next_bridge_day do %>
      ,{
        "@type": "Question",
        "name": "Wann ist der nächste Brückentag in <%= @federal_state.name %>?",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "<%= 
                    next_bridge_day = Enum.flat_map(@bridge_day_map, fn {_k, v} -> v || [] end)
                    |> Enum.filter(fn bd -> Date.compare(bd.starts_on, reference_date) == :gt end)
                    |> Enum.sort_by(fn bd -> bd.starts_on end)
                    |> List.first 
                    
                    output = if next_bridge_day do 
                      window_start = Date.add(next_bridge_day.starts_on, -5)
                      window_end = Date.add(next_bridge_day.ends_on, 5)
                      relevant_periods = Enum.filter(@public_periods, fn period ->
                        Date.compare(period.ends_on, window_start) != :lt &&
                        Date.compare(period.starts_on, window_end) != :gt &&
                        period.is_public_holiday
                      end)
                      holiday_before = Enum.find(relevant_periods, fn period -> 
                        Date.compare(period.ends_on, next_bridge_day.starts_on) == :lt && 
                        Date.diff(next_bridge_day.starts_on, period.ends_on) <= 3
                      end)
                      holiday_after = Enum.find(relevant_periods, fn period -> 
                        Date.compare(period.starts_on, next_bridge_day.ends_on) == :gt && 
                        Date.diff(period.starts_on, next_bridge_day.ends_on) <= 3
                      end)
                      related_holiday = holiday_before || holiday_after
                      holiday_name = if related_holiday && related_holiday.holiday_or_vacation_type, 
                        do: related_holiday.holiday_or_vacation_type.name, 
                        else: nil
                        
                      date_str = ViewHelpers.format_date_range(next_bridge_day.starts_on, next_bridge_day.ends_on)
                      holiday_str = if holiday_name, do: " (#{holiday_name})", else: ""
                      "Der nächste Brückentag in #{@federal_state.name} ist am #{date_str}#{holiday_str}."
                    else
                      "Für dieses Jahr sind keine weiteren Brückentage in #{@federal_state.name} geplant."
                    end
                    
                    output
                  %>"
        }
      }
      <% end %>
      ]
    }
    </script>
  <% end %>
</div> 